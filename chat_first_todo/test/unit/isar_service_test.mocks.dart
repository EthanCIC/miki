// Mocks generated by Mockito 5.4.4 from annotations
// in miki/test/unit/isar_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:isar/isar.dart' as _i2;
import 'package:miki/data/models/todo.dart' as _i5;
import 'package:miki/data/services/isar_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIsar_0 extends _i1.SmartFake implements _i2.Isar {
  _FakeIsar_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IsarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsarService extends _i1.Mock implements _i3.IsarService {
  MockIsarService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Isar> get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _i4.Future<_i2.Isar>.value(_FakeIsar_0(
          this,
          Invocation.getter(#db),
        )),
      ) as _i4.Future<_i2.Isar>);

  @override
  set db(_i4.Future<_i2.Isar>? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i2.Isar> openDB() => (super.noSuchMethod(
        Invocation.method(
          #openDB,
          [],
        ),
        returnValue: _i4.Future<_i2.Isar>.value(_FakeIsar_0(
          this,
          Invocation.method(
            #openDB,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Isar>);

  @override
  _i4.Future<int> createTodo(_i5.Todo? todo) => (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [todo],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.Todo>> getAllTodos() => (super.noSuchMethod(
        Invocation.method(
          #getAllTodos,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Todo>>.value(<_i5.Todo>[]),
      ) as _i4.Future<List<_i5.Todo>>);

  @override
  _i4.Future<_i5.Todo?> getTodoById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getTodoById,
          [id],
        ),
        returnValue: _i4.Future<_i5.Todo?>.value(),
      ) as _i4.Future<_i5.Todo?>);

  @override
  _i4.Future<bool> updateTodo(_i5.Todo? todo) => (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todo],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> deleteTodo(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<int>> bulkCreateTodos(List<_i5.Todo>? todos) =>
      (super.noSuchMethod(
        Invocation.method(
          #bulkCreateTodos,
          [todos],
        ),
        returnValue: _i4.Future<List<int>>.value(<int>[]),
      ) as _i4.Future<List<int>>);

  @override
  _i4.Future<List<int>> bulkUpdateTodos(List<_i5.Todo>? todos) =>
      (super.noSuchMethod(
        Invocation.method(
          #bulkUpdateTodos,
          [todos],
        ),
        returnValue: _i4.Future<List<int>>.value(<int>[]),
      ) as _i4.Future<List<int>>);

  @override
  _i4.Future<int> bulkDeleteTodos(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #bulkDeleteTodos,
          [ids],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.Todo>> getTodosByStatus(_i5.TodoStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodosByStatus,
          [status],
        ),
        returnValue: _i4.Future<List<_i5.Todo>>.value(<_i5.Todo>[]),
      ) as _i4.Future<List<_i5.Todo>>);

  @override
  _i4.Future<List<_i5.Todo>> getPendingTodos() => (super.noSuchMethod(
        Invocation.method(
          #getPendingTodos,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Todo>>.value(<_i5.Todo>[]),
      ) as _i4.Future<List<_i5.Todo>>);

  @override
  _i4.Future<List<_i5.Todo>> getOverdueTodos() => (super.noSuchMethod(
        Invocation.method(
          #getOverdueTodos,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Todo>>.value(<_i5.Todo>[]),
      ) as _i4.Future<List<_i5.Todo>>);

  @override
  _i4.Future<List<_i5.Todo>> getTodayTodos() => (super.noSuchMethod(
        Invocation.method(
          #getTodayTodos,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Todo>>.value(<_i5.Todo>[]),
      ) as _i4.Future<List<_i5.Todo>>);

  @override
  _i4.Future<List<_i5.Todo>> getTodosByPriority() => (super.noSuchMethod(
        Invocation.method(
          #getTodosByPriority,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Todo>>.value(<_i5.Todo>[]),
      ) as _i4.Future<List<_i5.Todo>>);

  @override
  _i4.Future<List<_i5.Todo>> getTodosByTag(String? tag) => (super.noSuchMethod(
        Invocation.method(
          #getTodosByTag,
          [tag],
        ),
        returnValue: _i4.Future<List<_i5.Todo>>.value(<_i5.Todo>[]),
      ) as _i4.Future<List<_i5.Todo>>);

  @override
  _i4.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> needsMigration() => (super.noSuchMethod(
        Invocation.method(
          #needsMigration,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> getDatabaseVersion() => (super.noSuchMethod(
        Invocation.method(
          #getDatabaseVersion,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getMigrationHistory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMigrationHistory,
          [],
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<void> rebuildDatabase() => (super.noSuchMethod(
        Invocation.method(
          #rebuildDatabase,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
